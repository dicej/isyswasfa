package component:test;

interface baz {
  foo: func(s: string) -> string;
}

world round-trip {
  import wasi:clocks/monotonic-clock@0.2.0;
  import baz;
  export baz;
}

interface http {
  use wasi:io/streams@0.2.0.{input-stream, output-stream};

  record request {
    method: string,
    uri: string,
    headers: list<tuple<string, list<u8>>>,
    body: option<input-stream>
  }

  record response {
    status: u16,
    headers: list<tuple<string, list<u8>>>,
    body: option<input-stream>
  }

  handle: func(request: request) -> response;
}

world middleware {
  import http;
  export http;
}

world service {
  import isyswasfa:io/pipe;
  export http;
}

interface incoming-handler {
  use wasi:http/types@0.2.0.{incoming-request, outgoing-response};
 
  handle: func(request: incoming-request) -> outgoing-response;
}

world wasi-http-handler {
  export incoming-handler;
}
